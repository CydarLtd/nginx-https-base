server {
    server_name {{item.domain}};

    ssl_certificate     /etc/letsencrypt/live/{{item.domain}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{item.domain}}/privkey.pem;

    include server_defaults;


    location / {
        proxy_pass {{item.target}};

        # set to $proxy_params if server requires given hostname
        proxy_set_header Host {{item.Host|default("$host")}};

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Transparent automatic websocket upgrade
        # relies on map statement in nginx.conf
        # see https://nginx.org/en/docs/http/websocket.html
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_redirect $proxy_host https://$server_name/;

        {% if rewrite_origin_and_referrer %}
        # replace hostname in Referer and Origin headers to avoid triggering a
        # CORS error without cause
        # Importantly, only rewrite request/origin headers coming from the forward domain
        set $new_referer $http_referer;
        if ($http_referer ~ "^(.+?){{ item.domain }}(.*)$") {
            set $new_referer "$1{{ item.target | regex_replace('^https?://([\w\.]+(:[0-9]+)?).*$', '\\1') }}$2";
        }
        proxy_set_header Referer $new_referer;

        set $new_origin $http_origin;
        if ($http_origin ~ "^(.+?){{ item.domain }}(.*)$") {
            set $new_origin "$1{{ item.target | regex_replace('^https?://([\w\.]+(:[0-9]+)?).*$', '\\1') }}";
        }
        proxy_set_header Origin $new_origin;
        {% endif %}

        {{item.location_extra|default('')|indent(8)}}
    }
}
